####################     passport waf_cc by zhouj     #################
## 2016年6月9日 11:26:36 up
## 后续 增加 http / https 网站使用一份配置文件，不再区分 http.conf 和 https.conf

upstream @upstream@ {
    #server 13.7.42.92 max_fails=1 fail_timeout=10s;
    #server 192.168.1.158 backup;
    @servers@
    keepalive 32;
    keepalive_requests 10000;
    }

server {
    listen       @http_port@;
    @https_port@
    # listen       443 ssl @is_http2@;
    server_name  @host@;
    # access_log  off;
    access_log logs/@host@.log main buffer=32768 flush=3;
    # error_log   /dev/null crit;

    # 默认 nginx.conf 主配置文件已配置，有自定义需求在修改
    @ssl_certificate@
    @ssl_certificate_key@
    @ssl_verify_client@
    @ssl_client_certificate@

    @is_ssl@
    @rewrite_https@


    location / {
        # 使用统一配置（可到 平台配置 - 文件配置 - proxy.conf 进行修改）
        include proxy.conf;
        # 自定义配置 请自行添加
        # proxy_set_header           Proxy '$hostname-$server_addr';
        proxy_pass @p_protocol@://@upstream@;
        # proxy cache 配置
        set $p_cache "1";
        # p_cache = "1" 不缓存
        proxy_cache my_cache;
        proxy_cache_valid 200 206 20m;
        proxy_cache_valid 301 302 304 1h;
        proxy_cache_valid 403 404 444 1h;
        # proxy_cache_valid 500 502 1h;
        # proxy_cache_use_stale error updating timeout http_500 http_502 http_503 http_504;
        proxy_cache_lock      on;
        proxy_cache_lock_timeout  5s;
        #slice 1m;
        proxy_set_header Range $slice_range;
        #proxy_cache_key $host$uri$is_args$args$slice_range;
        proxy_cache_key $host$uri$is_args$args;
        proxy_cache_bypass $cookie_nocache $p_cache;
        proxy_cache_revalidate on;
        add_header WAF-X-Cache "$upstream_cache_status";

        # 配置容错处理 幂等请求不开启容错（non_idempotent）
        proxy_next_upstream http_502 http_504 http_500 error timeout invalid_header;
        proxy_ignore_headers Cache-Control Set-Cookie;
        # 默认 proxy_ignore_client_abort 是关闭的
        # 此时在请求过程中如果客户端端主动关闭请求或者客户端网络断掉，那么 Nginx 会记录 499
        # proxy_ignore_client_abort  on;

        # 限速配置
        limit_rate_after 5m;

        # mirror /mirror;
        }

    location /mirror {
        internal;
        proxy_connect_timeout      1s;
        proxy_send_timeout         1s;
        proxy_read_timeout         1s;
        proxy_http_version 1.1;
        proxy_set_header   Host             $host;
        proxy_set_header Connection "";
        proxy_set_header   X-Forwarded-For  $remote_addr;
        proxy_set_header   WAF-TRACE-ID $request_id;
        proxy_pass http://http_mirror$request_uri;
    }
}